/* Copyright 2018 by Yifei Zheng
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cstddef>
#include <type_traits>

typedef std::integral_constant<std::size_t, 1 << 20> max_chunk_size;

template <typename T>
struct chunk {
    chunk* prev;
    typedef std::integral_constant<std::size_t, 
                (max_chunk_size::value - 2 * sizeof(chunk*)) / sizeof(T)> cur_size;
    T arr[cur_size::value];
    chunk* next;
};

template <typename Ts>
struct iter {
    typedef chunk<Ts> T;
    static_assert(sizeof(T) < max_chunk_size::value);
    T* curc;
    Ts* cur;
    void operator++() {
        ++cur;
        if (cur == curc->arr + T::cur_size::value) {
            curc = curc->next;
            cur = curc->arr;
        }
    }
};

